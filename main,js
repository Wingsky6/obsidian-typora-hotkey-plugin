/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => MyPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// src/command.ts
var a = (editor, view) => {
  let content = view.data;
  const _attachment = "";
  let title = view.file.basename;
  let path = view.file.path;
  let imageInfoList = content.match(/!\[(.*?)\]\((.*?)\)/ig);
  let obImgList = [];
  if (imageInfoList == null) {
    return;
  }
  imageInfoList.forEach((imageInfo) => {
    const imgNickname = imageInfo.match(/!\[(.*?)\]/)[1];
    const imgPath = imageInfo.match(/\((.*?)\)/)[1];
    let imgName = imgPath;
    if (imgPath.match(/.*\/.*\/(.*\..*)/) != null) {
      imgName = imgPath.match(/.*\/.*\/(.*\..*)/)[1];
    }
    const obImg = "![[" + imgName + (imgNickname != imgName && imgNickname != "" ? "|" + imgNickname : "") + "]]";
    obImgList.push({ mdImg: imageInfo, obImg, path: imgPath });
  });
  if (obImgList == null) {
    return;
  }
  obImgList.forEach((item) => {
    content = content.replace(item.mdImg, item.obImg);
  });
  view.data = content;
  editor.setValue(content);
};
var command_default = a;

// src/Commands/replace1Cmd.ts
var import_obsidian = __toModule(require("obsidian"));
var replace2 = (editor, view) => {
  let str = editor.getSelection();
  str = reg(str, "Revit");
  editor.replaceSelection(str);
};
var reg = (str, cate) => {
  let a2 = str.matchAll(/. (.*)/g);
  let b = Array.from(a2);
  b.map((item) => {
    str = str.replace(item[1], "[[" + cate + " - " + item[1] + "|" + item[1] + "]]");
  });
  return str;
};

// src/Commands/ReplaceCommand/base.ts
var replaceBase = (regStart, regEnd, editor) => {
  let content = editor.getSelection();
  if (content != "") {
    content = handleWithRepeatStr(content, regStart, regEnd).str;
    editor.replaceSelection(content);
    return;
  } else {
    onReplaceUnSelectStr(editor, regStart, regEnd);
  }
};
var handleWithRepeatStr = (str, regStart, regEnd) => {
  const startStr = str.substring(0, regStart.length);
  if (startStr.includes(regStart, 0) && str.includes(regEnd, str.length - regEnd.length)) {
    str = str.substring(regStart.length, str.length - regEnd.length);
    return {
      ifCut: true,
      str
    };
  } else {
    str = regStart + str + regEnd;
    return {
      ifCut: false,
      str
    };
  }
};
var onReplaceUnSelectStr = (editor, regStart, regEnd) => {
  let position = editor.getCursor();
  let content = editor.getLine(position.line);
  let start = position.ch, end = start;
  const c = content[position.ch];
  const c1 = content[position.ch - 1];
  do {
    start--;
  } while (content[start] != " " && content[start] != void 0 && checkAll(c) == checkAll(content[start]) && checkAll(c1) != 0);
  do {
    end++;
  } while (content[end] != " " && content[end] != void 0 && checkAll(c) == checkAll(content[end]) && checkAll(c) != 0);
  console.log(c, "c", content[end - 1], content[start + 1]);
  let replaceStr = handleWithRepeatStr(content.substring(start + 1, end), regStart, regEnd);
  let replaceContent = content.substring(0, start + 1) + replaceStr.str + content.substring(end);
  let newPosition = {
    ch: start + replaceStr.str.length - (!replaceStr.ifCut ? regEnd.length : 0) + 1,
    line: position.line
  };
  editor.setLine(position.line, replaceContent);
  editor.setCursor(newPosition, newPosition.ch);
};
var checkAll = (str) => {
  if (checkCh(str)) {
    return 2;
  }
  if (checkEN(str)) {
    return 1;
  }
  if (checkNum(str)) {
    return 1;
  }
  if (checkSpecialChar(str)) {
    return 0;
  }
  return 0;
};
var checkCh = (str) => {
  var pattern = new RegExp("[\u4E00-\u9FA5]+");
  return pattern.test(str);
};
var checkEN = (str) => {
  var pattern = new RegExp("[A-Za-z]+");
  return pattern.test(str);
};
var checkNum = (str) => {
  var pattern = new RegExp("[0-9]+");
  return pattern.test(str);
};
var checkSpecialChar = (str) => {
  var specialChars = "~\xB7`!\uFF01@#$\uFFE5%^\u2026&*()\uFF08\uFF09\u2014-_=+[]{}\u3010\u3011\u3001|\\;:\uFF1B\uFF1A'\"\u201C\u2018,./<>\u300A\u300B?\uFF1F\uFF0C\u3002";
  var len = specialChars.length;
  for (var i = 0; i < len; i++) {
    if (str.indexOf(specialChars.substring(i, i + 1)) != -1) {
      return true;
    }
  }
  return false;
};

// src/Commands/ReplaceCommand/replaceByDelimiter.ts
var replaceBaseByDelimiter = (regStart, regEnd, delimiter, editor) => {
  let content = editor.getSelection();
  if (content != "") {
    let res = handleWithRepeatStrs(content, regStart, regEnd, delimiter);
    editor.replaceSelection(res);
    return;
  } else {
    onReplaceUnSelectStr2(editor, regStart, regEnd, delimiter);
  }
};
var handleWithRepeatStrs = (str, regStart, regEnd, delimiter) => {
  let words = str.split(delimiter);
  let res = "";
  let i = 0;
  words.map((item) => {
    res += (i == 0 ? "" : delimiter) + handleWithRepeatStr2(item, regStart, regEnd);
    i++;
  });
  return res;
};
var handleWithRepeatStr2 = (str, regStart, regEnd) => {
  const startStr = str.substring(0, regStart.length);
  if (startStr.includes(regStart, 0) && str.includes(regEnd, str.length - regEnd.length)) {
    str = str.substring(regStart.length, str.length - regEnd.length);
  } else {
    str = regStart + str + regEnd;
  }
  return str;
};
var onReplaceUnSelectStr2 = (editor, regStart, regEnd, delimiter) => {
  let position = editor.getCursor();
  let content = editor.getLine(position.line);
  let start = position.ch, end = start;
  do {
    start--;
  } while (content[start] != " " && content[start] != void 0);
  do {
    end++;
  } while (content[end] != " " && content[end] != void 0);
  let replaceStr = handleWithRepeatStrs(content.substring(start + 1, end), regStart, regEnd, delimiter);
  let replaceContent = content.substring(0, start + 1) + replaceStr + content.substring(end);
  editor.setLine(position.line, replaceContent);
};

// src/Commands/ReplaceCommand/index.ts
var replaceKBDs = () => {
  const title = "\u6839\u636E+\u53F7\u6DFB\u52A0\u6216\u53D6\u6D88\u591A\u4E2A\u952E\u76D8\u683C\u5F0F";
  const command = (editor, view) => {
    replaceBaseByDelimiter("<kbd>", "</kbd>", "+", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl", "Alt"],
    key: "T"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var replaceKBD = () => {
  const title = "\u6DFB\u52A0\u6216\u53D6\u6D88\u952E\u76D8\u683C\u5F0F";
  const command = (editor, view) => {
    replaceBase("<kbd>", "</kbd>", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "T"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var replaceRowCode = () => {
  const title = "\u6DFB\u52A0\u6216\u53D6\u6D88\u884C\u4EE3\u7801\u683C\u5F0F";
  const command = (editor, view) => {
    replaceBase("`", "`", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl", "Shift"],
    key: "`"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var replaceComment = () => {
  const title = "\u6DFB\u52A0\u6216\u53D6\u6D88\u8BC4\u8BBA";
  const command = (editor, view) => {
    replaceBase("<!--", "-->", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "M"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var replaceBlockCode = () => {
  const title = "\u6DFB\u52A0\u6216\u53D6\u6D88\u5757\u4EE3\u7801";
  const command = (editor, view) => {
    replaceBase("\n```\n", "\n```", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl", "Shift"],
    key: "K"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var replaceRowLatexCode = () => {
  const title = "\u6DFB\u52A0\u6216\u53D6\u6D88Latex\u884C\u683C\u5F0F";
  const command = (editor, view) => {
    replaceBase("$", "$", editor);
  };
  const hotkey = {
    modifiers: ["Shift"],
    key: "4"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var replaceLatexCode = () => {
  const title = "\u6DFB\u52A0\u6216\u53D6\u6D88Latex\u5757\u683C\u5F0F";
  const command = (editor, view) => {
    replaceBase("$$\n", "\n$$", editor);
  };
  const hotkey = {
    modifiers: ["Shift", "Ctrl"],
    key: "M"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};

// src/Commands/TextCommand/index.ts
var addDeleteEffet = () => {
  const title = "\u5220\u9664\u7EBF";
  const command = (editor, view) => {
    replaceBase("~~", "~~", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl", "Alt"],
    key: "5"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addTiltEffect = () => {
  const title = "\u503E\u659C";
  const command = (editor, view) => {
    replaceBase("*", "*", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "i"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addQuoteEffect = () => {
  const title = "\u5F15\u7528";
  const command = (editor, view) => {
    addQuote(">", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl", "Shift"],
    key: "q"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addQuote = (reg2, editor) => {
  const content = editor.getSelection();
  if (content != "") {
    const res = handleWithRepeatStrs(content, reg2, "", "\n");
    editor.replaceSelection(res);
  } else {
    let position = editor.getCursor();
    let line = editor.getLine(position.line);
    line = handleWithRepeatStr3(line, reg2);
    editor.setLine(position.line, line);
  }
};
var handleWithRepeatStr3 = (str, regStart) => {
  if (str.substring(0, regStart.length).includes(regStart, 0)) {
    str = str.substring(regStart.length);
    return str;
  }
  str = regStart + str;
  return str;
};

// src/Commands/TitleCommand/index.ts
var addH1 = () => {
  const title = "H1\u6807\u9898";
  const command = (editor, view) => {
    addTitle("# ", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "1"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addH2 = () => {
  const title = "H2\u6807\u9898";
  const command = (editor, view) => {
    addTitle("## ", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "2"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addH3 = () => {
  const title = "H3\u6807\u9898";
  const command = (editor, view) => {
    addTitle("### ", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "3"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addH4 = () => {
  const title = "H4\u6807\u9898";
  const command = (editor, view) => {
    addTitle("#### ", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "4"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addH5 = () => {
  const title = "H5\u6807\u9898";
  const command = (editor, view) => {
    addTitle("##### ", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "5"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addH6 = () => {
  const title = "H6\u6807\u9898";
  const command = (editor, view) => {
    addTitle("###### ", editor);
  };
  const hotkey = {
    modifiers: ["Ctrl"],
    key: "6"
  };
  return {
    id: title,
    name: title,
    editorCallback: command,
    hotkeys: [hotkey]
  };
};
var addTitle = (reg2, editor) => {
  let position = editor.getCursor();
  let content = editor.getLine(position.line);
  content = handleWithRepeatStr4(content, reg2);
  editor.setLine(position.line, content);
};
var handleWithRepeatStr4 = (str, regStart) => {
  const modifiers = ["# ", "## ", "### ", "#### ", "##### ", "###### "];
  for (let index = 0; index < modifiers.length; index++) {
    const element = modifiers[index];
    if (str.substring(0, element.length).includes(element, 0)) {
      str = str.substring(element.length);
      if (element == regStart) {
        return str;
      }
      break;
    }
  }
  str = regStart + str;
  return str;
};

// src/setting.ts
var DEFAULT_SETTINGS = {
  command_timeout: 5,
  templates_folder: "",
  templates_pairs: [["", ""]],
  trigger_on_file_creation: false,
  auto_jump_to_cursor: false,
  enable_system_commands: false,
  shell_path: "",
  user_scripts_folder: "",
  enable_folder_templates: true,
  syntax_highlighting: true,
  enabled_templates_hotkeys: [""],
  startup_templates: [""]
};

// main.ts
var MyPlugin = class extends import_obsidian2.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.addCommand({
        id: "replace2",
        name: "replace2",
        editorCallback: replace2
      });
      this.addCommand({
        id: "image-obsidian-typora",
        name: "\u5355\u94FE\u8F6C\u53CC\u94FE",
        editorCallback: command_default
      });
      this.addCommand(replaceKBD());
      this.addCommand(replaceKBDs());
      this.addCommand(replaceRowCode());
      this.addCommand(replaceComment());
      this.addCommand(replaceBlockCode());
      this.addCommand(replaceRowLatexCode());
      this.addCommand(replaceLatexCode());
      this.addCommand(addTiltEffect());
      this.addCommand(addDeleteEffet());
      this.addCommand(addQuoteEffect());
      this.addCommand(addH1());
      this.addCommand(addH2());
      this.addCommand(addH3());
      this.addCommand(addH4());
      this.addCommand(addH5());
      this.addCommand(addH6());
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
